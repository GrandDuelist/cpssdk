!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CPSCrop	.\__init__.py	/^from .cpsspatio import CPSSpatio,CPSCrop,CPSDistance$/;"	i
CPSCrop	.\cpsspatio.py	/^class CPSCrop():$/;"	c
CPSDistance	.\__init__.py	/^from .cpsspatio import CPSSpatio,CPSCrop,CPSDistance$/;"	i
CPSDistance	.\cpsspatio.py	/^class CPSDistance():$/;"	c
CPSFeatures	.\__init__.py	/^from .cpsfeatures import CPSFeatures$/;"	i
CPSFeatures	.\cpsfeatures.py	/^class CPSFeatures():$/;"	c
CPSOS	.\__init__.py	/^from .cpsos import CPSOS$/;"	i
CPSOS	.\cpsos.py	/^class CPSOS():$/;"	c
CPSPlot	.\__init__.py	/^from .cpsplot import CPSPlot$/;"	i
CPSPlot	.\cpsplot.py	/^class CPSPlot():$/;"	c
CPSSpatio	.\__init__.py	/^from .cpsspatio import CPSSpatio,CPSCrop,CPSDistance$/;"	i
CPSSpatio	.\cpsspatio.py	/^class CPSSpatio():$/;"	c
CPSTime	.\__init__.py	/^from .cpstime import CPSTime$/;"	i
CPSTime	.\cpstime.py	/^class CPSTime():$/;"	c
GPSDist	.\cpsspatio.py	/^    def GPSDist(self,p1,p2):$/;"	m	class:CPSDistance
GPSSpeed	.\cpsfeatures.py	/^    def GPSSpeed(self,start_point,end_point,start_time,end_time):$/;"	m	class:CPSFeatures
__init__	.\cpsfeatures.py	/^    def __init__(self):$/;"	m	class:CPSFeatures
__init__	.\cpsplot.py	/^    def __init__(self):$/;"	m	class:CPSPlot
__init__	.\cpsspatio.py	/^    def __init__(self):$/;"	m	class:CPSCrop
__init__	.\cpsspatio.py	/^    def __init__(self,grid_shape=None):$/;"	m	class:CPSSpatio
aa	.\cpsspatio-test.py	/^aa = simplejson.load(open('C:\\Users\\zhiha\\Downloads\\china.json'))$/;"	v
atan2	.\cpsspatio.py	/^from math import sin, cos, sqrt, atan2, radians$/;"	i
changeTimeSlot	.\cpstime.py	/^    def changeTimeSlot(self,time_slot,orig_time_granularity,new_time_granularity):$/;"	m	class:CPSTime
cos	.\cpsspatio.py	/^from math import sin, cos, sqrt, atan2, radians$/;"	i
countInRegion	.\cpsspatio.py	/^    def countInRegion(self,X,Y,Z):$/;"	m	class:CPSSpatio
cpsspatio	.\cpsspatio-test.py	/^cpsspatio = CPSSpatio()$/;"	v
cpsspatio	.\cpsspatio.py	/^    cpsspatio = CPSSpatio()$/;"	v	class:CPSDistance
datetime	.\cpstime.py	/^from datetime import datetime$/;"	i
equalTimeSeparator	.\cpstime.py	/^    def equalTimeSeparator(self,start_time,end_time,interval_seconds = 600):$/;"	m	class:CPSTime
findCandidatesInGrids	.\cpsspatio.py	/^    def findCandidatesInGrids(self,point):$/;"	m	class:CPSSpatio
findPointInPolygonJson	.\cpsspatio.py	/^    def findPointInPolygonJson(self,point):$/;"	m	class:CPSSpatio
findPointRegionID	.\cpsspatio.py	/^    def findPointRegionID(self,point):$/;"	m	class:CPSSpatio
getRectBoundaryFromRegions	.\cpsspatio.py	/^    def getRectBoundaryFromRegions(self,regions):$/;"	m	class:CPSSpatio
googleDriveFilePath	.\cpsos.py	/^    def googleDriveFilePath(self,google_drive,file_path,ch="\\\\"):$/;"	m	class:CPSOS
init	.\cpsspatio.py	/^    def init(self,out_edge_regions=None):$/;"	m	class:CPSSpatio
initRectToPolygonMapping	.\cpsspatio.py	/^    def initRectToPolygonMapping(self):$/;"	m	class:CPSSpatio
initSpatioRectBoundary	.\cpsspatio.py	/^    def initSpatioRectBoundary(self,minx,maxx,miny,maxy):$/;"	m	class:CPSSpatio
initSpatioRegion	.\cpsspatio.py	/^    def initSpatioRegion(self,out_edge):$/;"	m	class:CPSSpatio
isInPolygon	.\cpsspatio.py	/^    def isInPolygon(self,x,y):$/;"	m	class:CPSCrop
isInRectangle	.\cpsspatio.py	/^    def isInRectangle(self,x,y):$/;"	m	class:CPSCrop
json	.\cpsspatio.py	/^import json$/;"	i
locationOfGrids	.\cpsspatio.py	/^    def locationOfGrids(self):$/;"	m	class:CPSSpatio
mergeFiles	.\cpsos.py	/^    def mergeFiles(self,inputdir,output_file=None):$/;"	m	class:CPSOS
minmaxGeoJson	.\cpsspatio.py	/^def minmaxGeoJson(geojson_path):$/;"	f
oneDayToSeconds	.\cpstime.py	/^    def oneDayToSeconds(self,time_str):$/;"	m	class:CPSTime
os	.\cpsos.py	/^import os $/;"	i
os	.\cpsplot.py	/^import os$/;"	i
parseTime	.\cpstime.py	/^    def parseTime(self,timeStr):$/;"	m	class:CPSTime
parseTimeToStr	.\cpstime.py	/^    def parseTimeToStr(self,time_value):$/;"	m	class:CPSTime
pnpoly	.\cpsspatio.py	/^    def pnpoly(self,polygon,point):$/;"	m	class:CPSSpatio
pointToGridIndex	.\cpsspatio.py	/^    def pointToGridIndex(self,point):$/;"	m	class:CPSSpatio
radians	.\cpsspatio.py	/^from math import sin, cos, sqrt, atan2, radians$/;"	i
searchPointInRegions	.\cpsspatio.py	/^    def searchPointInRegions(self,point,candidates):$/;"	m	class:CPSSpatio
setGeoJsonMultiplePolygon	.\cpsspatio.py	/^    def setGeoJsonMultiplePolygon(self,geopolygonarray):$/;"	m	class:CPSSpatio
setPolygonBoundary	.\cpsspatio.py	/^    def setPolygonBoundary(self,polygon_list):$/;"	m	class:CPSCrop
setRectangle	.\cpsspatio.py	/^    def setRectangle(self,minx,maxx,miny,maxy):$/;"	m	class:CPSCrop
setShenzhenPolygonBoundary	.\cpsspatio.py	/^    def setShenzhenPolygonBoundary(self):$/;"	m	class:CPSCrop
setShenzhenRectangle	.\cpsspatio.py	/^    def setShenzhenRectangle(self):$/;"	m	class:CPSCrop
simplejson	.\cpsspatio-test.py	/^import simplejson$/;"	i
sin	.\cpsspatio.py	/^from math import sin, cos, sqrt, atan2, radians$/;"	i
smooth	.\cpsplot.py	/^    def smooth(self,ys,widthsize):$/;"	m	class:CPSPlot
sqrt	.\cpsspatio.py	/^from math import sin, cos, sqrt, atan2, radians$/;"	i
styles	.\cpsplot.py	/^    def styles(self):$/;"	m	class:CPSPlot
timeDifferenceToSeconds	.\cpstime.py	/^    def timeDifferenceToSeconds(self,start_time,end_time):$/;"	m	class:CPSTime
timeSlot	.\cpstime.py	/^    def timeSlot(self,time=None,t_hour = None, t_min=None,t_sec = None):$/;"	m	class:CPSTime
timeSlotToTime	.\cpstime.py	/^    def timeSlotToTime(self,time_slot,time_slot_granularity=1,start_time = None):$/;"	m	class:CPSTime
timeToMin	.\cpstime.py	/^    def timeToMin(self,t_hour=None,t_min=None,t_sec=None):$/;"	m	class:CPSTime
timedelta	.\cpstime.py	/^from datetime import timedelta$/;"	i
